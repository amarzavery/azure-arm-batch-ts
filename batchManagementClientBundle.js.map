{"version":3,"sources":["webpack:///webpack/bootstrap 16230280d6eb7ca752d9","webpack:///./lib/models/mappers.ts","webpack:///external \"msRest\"","webpack:///external \"msRestAzure\"","webpack:///./lib/batchManagementClient.ts","webpack:///./lib/models/index.ts","webpack:///./lib/operations/index.ts","webpack:///./lib/operations/batchAccountOperations.ts","webpack:///./lib/operations/applicationPackageOperations.ts","webpack:///./lib/operations/applicationOperations.ts","webpack:///./lib/operations/location.ts","webpack:///./lib/operations/operations.ts"],"names":[],"mappings":"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","file":"batchManagementClientBundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 16230280d6eb7ca752d9","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport {CloudErrorMapper, BaseResourceMapper } from \"ms-rest-azure-js\";\n\nexport const CloudError = CloudErrorMapper;\nexport const BaseResource = BaseResourceMapper;\n\nexport const AutoStorageBaseProperties = {\n  required: false,\n  serializedName: 'AutoStorageBaseProperties',\n  type: {\n    name: 'Composite',\n    className: 'AutoStorageBaseProperties',\n    modelProperties: {\n      storageAccountId: {\n        required: true,\n        serializedName: 'storageAccountId',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\nexport const KeyVaultReference = {\n  required: false,\n  serializedName: 'KeyVaultReference',\n  type: {\n    name: 'Composite',\n    className: 'KeyVaultReference',\n    modelProperties: {\n      id: {\n        required: true,\n        serializedName: 'id',\n        type: {\n          name: 'String'\n        }\n      },\n      url: {\n        required: true,\n        serializedName: 'url',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\nexport const BatchAccountCreateParameters = {\n  required: false,\n  serializedName: 'BatchAccountCreateParameters',\n  type: {\n    name: 'Composite',\n    className: 'BatchAccountCreateParameters',\n    modelProperties: {\n      location: {\n        required: true,\n        serializedName: 'location',\n        type: {\n          name: 'String'\n        }\n      },\n      tags: {\n        required: false,\n        serializedName: 'tags',\n        type: {\n          name: 'Dictionary',\n          value: {\n              required: false,\n              serializedName: 'stringElementType',\n              type: {\n                name: 'String'\n              }\n          }\n        }\n      },\n      autoStorage: {\n        required: false,\n        serializedName: 'properties.autoStorage',\n        type: {\n          name: 'Composite',\n          className: 'AutoStorageBaseProperties'\n        }\n      },\n      poolAllocationMode: {\n        required: false,\n        serializedName: 'properties.poolAllocationMode',\n        type: {\n          name: 'Enum',\n          allowedValues: [ 'BatchService', 'UserSubscription' ]\n        }\n      },\n      keyVaultReference: {\n        required: false,\n        serializedName: 'properties.keyVaultReference',\n        type: {\n          name: 'Composite',\n          className: 'KeyVaultReference'\n        }\n      }\n    }\n  }\n};\n\nexport const AutoStorageProperties = {\n  required: false,\n  serializedName: 'AutoStorageProperties',\n  type: {\n    name: 'Composite',\n    className: 'AutoStorageProperties',\n    modelProperties: {\n      storageAccountId: {\n        required: true,\n        serializedName: 'storageAccountId',\n        type: {\n          name: 'String'\n        }\n      },\n      lastKeySync: {\n        required: true,\n        serializedName: 'lastKeySync',\n        type: {\n          name: 'DateTime'\n        }\n      }\n    }\n  }\n};\n\nexport const Resource = {\n  required: false,\n  serializedName: 'Resource',\n  type: {\n    name: 'Composite',\n    className: 'Resource',\n    modelProperties: {\n      id: {\n        required: false,\n        readOnly: true,\n        serializedName: 'id',\n        type: {\n          name: 'String'\n        }\n      },\n      name: {\n        required: false,\n        readOnly: true,\n        serializedName: 'name',\n        type: {\n          name: 'String'\n        }\n      },\n      type: {\n        required: false,\n        readOnly: true,\n        serializedName: 'type',\n        type: {\n          name: 'String'\n        }\n      },\n      location: {\n        required: false,\n        readOnly: true,\n        serializedName: 'location',\n        type: {\n          name: 'String'\n        }\n      },\n      tags: {\n        required: false,\n        readOnly: true,\n        serializedName: 'tags',\n        type: {\n          name: 'Dictionary',\n          value: {\n              required: false,\n              serializedName: 'stringElementType',\n              type: {\n                name: 'String'\n              }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BatchAccount = {\n  required: false,\n  serializedName: 'BatchAccount',\n  type: {\n    name: 'Composite',\n    className: 'BatchAccount',\n    modelProperties: {\n      id: {\n        required: false,\n        readOnly: true,\n        serializedName: 'id',\n        type: {\n          name: 'String'\n        }\n      },\n      name: {\n        required: false,\n        readOnly: true,\n        serializedName: 'name',\n        type: {\n          name: 'String'\n        }\n      },\n      type: {\n        required: false,\n        readOnly: true,\n        serializedName: 'type',\n        type: {\n          name: 'String'\n        }\n      },\n      location: {\n        required: false,\n        readOnly: true,\n        serializedName: 'location',\n        type: {\n          name: 'String'\n        }\n      },\n      tags: {\n        required: false,\n        readOnly: true,\n        serializedName: 'tags',\n        type: {\n          name: 'Dictionary',\n          value: {\n              required: false,\n              serializedName: 'stringElementType',\n              type: {\n                name: 'String'\n              }\n          }\n        }\n      },\n      accountEndpoint: {\n        required: false,\n        readOnly: true,\n        serializedName: 'properties.accountEndpoint',\n        type: {\n          name: 'String'\n        }\n      },\n      provisioningState: {\n        required: false,\n        readOnly: true,\n        serializedName: 'properties.provisioningState',\n        type: {\n          name: 'Enum',\n          allowedValues: [ 'Invalid', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Cancelled' ]\n        }\n      },\n      poolAllocationMode: {\n        required: false,\n        readOnly: true,\n        serializedName: 'properties.poolAllocationMode',\n        type: {\n          name: 'Enum',\n          allowedValues: [ 'BatchService', 'UserSubscription' ]\n        }\n      },\n      keyVaultReference: {\n        required: false,\n        readOnly: true,\n        serializedName: 'properties.keyVaultReference',\n        type: {\n          name: 'Composite',\n          className: 'KeyVaultReference'\n        }\n      },\n      autoStorage: {\n        required: false,\n        readOnly: true,\n        serializedName: 'properties.autoStorage',\n        type: {\n          name: 'Composite',\n          className: 'AutoStorageProperties'\n        }\n      },\n      dedicatedCoreQuota: {\n        required: false,\n        readOnly: true,\n        serializedName: 'properties.dedicatedCoreQuota',\n        type: {\n          name: 'Number'\n        }\n      },\n      lowPriorityCoreQuota: {\n        required: false,\n        readOnly: true,\n        serializedName: 'properties.lowPriorityCoreQuota',\n        type: {\n          name: 'Number'\n        }\n      },\n      poolQuota: {\n        required: false,\n        readOnly: true,\n        serializedName: 'properties.poolQuota',\n        type: {\n          name: 'Number'\n        }\n      },\n      activeJobAndJobScheduleQuota: {\n        required: false,\n        readOnly: true,\n        serializedName: 'properties.activeJobAndJobScheduleQuota',\n        type: {\n          name: 'Number'\n        }\n      }\n    }\n  }\n};\n\nexport const BatchAccountUpdateParameters = {\n  required: false,\n  serializedName: 'BatchAccountUpdateParameters',\n  type: {\n    name: 'Composite',\n    className: 'BatchAccountUpdateParameters',\n    modelProperties: {\n      tags: {\n        required: false,\n        serializedName: 'tags',\n        type: {\n          name: 'Dictionary',\n          value: {\n              required: false,\n              serializedName: 'stringElementType',\n              type: {\n                name: 'String'\n              }\n          }\n        }\n      },\n      autoStorage: {\n        required: false,\n        serializedName: 'properties.autoStorage',\n        type: {\n          name: 'Composite',\n          className: 'AutoStorageBaseProperties'\n        }\n      }\n    }\n  }\n};\n\nexport const BatchAccountRegenerateKeyParameters = {\n  required: false,\n  serializedName: 'BatchAccountRegenerateKeyParameters',\n  type: {\n    name: 'Composite',\n    className: 'BatchAccountRegenerateKeyParameters',\n    modelProperties: {\n      keyName: {\n        required: true,\n        serializedName: 'keyName',\n        type: {\n          name: 'Enum',\n          allowedValues: [ 'Primary', 'Secondary' ]\n        }\n      }\n    }\n  }\n};\n\nexport const BatchAccountKeys = {\n  required: false,\n  serializedName: 'BatchAccountKeys',\n  type: {\n    name: 'Composite',\n    className: 'BatchAccountKeys',\n    modelProperties: {\n      accountName: {\n        required: false,\n        readOnly: true,\n        serializedName: 'accountName',\n        type: {\n          name: 'String'\n        }\n      },\n      primary: {\n        required: false,\n        readOnly: true,\n        serializedName: 'primary',\n        type: {\n          name: 'String'\n        }\n      },\n      secondary: {\n        required: false,\n        readOnly: true,\n        serializedName: 'secondary',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\nexport const ActivateApplicationPackageParameters = {\n  required: false,\n  serializedName: 'ActivateApplicationPackageParameters',\n  type: {\n    name: 'Composite',\n    className: 'ActivateApplicationPackageParameters',\n    modelProperties: {\n      format: {\n        required: true,\n        serializedName: 'format',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\nexport const ApplicationCreateParameters = {\n  required: false,\n  serializedName: 'ApplicationCreateParameters',\n  type: {\n    name: 'Composite',\n    className: 'ApplicationCreateParameters',\n    modelProperties: {\n      allowUpdates: {\n        required: false,\n        serializedName: 'allowUpdates',\n        type: {\n          name: 'Boolean'\n        }\n      },\n      displayName: {\n        required: false,\n        serializedName: 'displayName',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\nexport const ApplicationPackage = {\n  required: false,\n  serializedName: 'ApplicationPackage',\n  type: {\n    name: 'Composite',\n    className: 'ApplicationPackage',\n    modelProperties: {\n      id: {\n        required: false,\n        readOnly: true,\n        serializedName: 'id',\n        type: {\n          name: 'String'\n        }\n      },\n      version: {\n        required: false,\n        readOnly: true,\n        serializedName: 'version',\n        type: {\n          name: 'String'\n        }\n      },\n      state: {\n        required: false,\n        readOnly: true,\n        serializedName: 'state',\n        type: {\n          name: 'Enum',\n          allowedValues: [ 'pending', 'active', 'unmapped' ]\n        }\n      },\n      format: {\n        required: false,\n        readOnly: true,\n        serializedName: 'format',\n        type: {\n          name: 'String'\n        }\n      },\n      storageUrl: {\n        required: false,\n        readOnly: true,\n        serializedName: 'storageUrl',\n        type: {\n          name: 'String'\n        }\n      },\n      storageUrlExpiry: {\n        required: false,\n        readOnly: true,\n        serializedName: 'storageUrlExpiry',\n        type: {\n          name: 'DateTime'\n        }\n      },\n      lastActivationTime: {\n        required: false,\n        readOnly: true,\n        serializedName: 'lastActivationTime',\n        type: {\n          name: 'DateTime'\n        }\n      }\n    }\n  }\n};\n\nexport const Application = {\n  required: false,\n  serializedName: 'Application',\n  type: {\n    name: 'Composite',\n    className: 'Application',\n    modelProperties: {\n      id: {\n        required: false,\n        serializedName: 'id',\n        type: {\n          name: 'String'\n        }\n      },\n      displayName: {\n        required: false,\n        serializedName: 'displayName',\n        type: {\n          name: 'String'\n        }\n      },\n      packages: {\n        required: false,\n        serializedName: 'packages',\n        type: {\n          name: 'Sequence',\n          element: {\n              required: false,\n              serializedName: 'ApplicationPackageElementType',\n              type: {\n                name: 'Composite',\n                className: 'ApplicationPackage'\n              }\n          }\n        }\n      },\n      allowUpdates: {\n        required: false,\n        serializedName: 'allowUpdates',\n        type: {\n          name: 'Boolean'\n        }\n      },\n      defaultVersion: {\n        required: false,\n        serializedName: 'defaultVersion',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\nexport const ApplicationUpdateParameters = {\n  required: false,\n  serializedName: 'ApplicationUpdateParameters',\n  type: {\n    name: 'Composite',\n    className: 'ApplicationUpdateParameters',\n    modelProperties: {\n      allowUpdates: {\n        required: false,\n        serializedName: 'allowUpdates',\n        type: {\n          name: 'Boolean'\n        }\n      },\n      defaultVersion: {\n        required: false,\n        serializedName: 'defaultVersion',\n        type: {\n          name: 'String'\n        }\n      },\n      displayName: {\n        required: false,\n        serializedName: 'displayName',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\nexport const BatchLocationQuota = {\n  required: false,\n  serializedName: 'BatchLocationQuota',\n  type: {\n    name: 'Composite',\n    className: 'BatchLocationQuota',\n    modelProperties: {\n      accountQuota: {\n        required: false,\n        readOnly: true,\n        serializedName: 'accountQuota',\n        type: {\n          name: 'Number'\n        }\n      }\n    }\n  }\n};\n\nexport const OperationDisplay = {\n  required: false,\n  serializedName: 'Operation_display',\n  type: {\n    name: 'Composite',\n    className: 'OperationDisplay',\n    modelProperties: {\n      provider: {\n        required: false,\n        serializedName: 'provider',\n        type: {\n          name: 'String'\n        }\n      },\n      operation: {\n        required: false,\n        serializedName: 'operation',\n        type: {\n          name: 'String'\n        }\n      },\n      resource: {\n        required: false,\n        serializedName: 'resource',\n        type: {\n          name: 'String'\n        }\n      },\n      description: {\n        required: false,\n        serializedName: 'description',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\nexport const Operation = {\n  required: false,\n  serializedName: 'Operation',\n  type: {\n    name: 'Composite',\n    className: 'Operation',\n    modelProperties: {\n      name: {\n        required: false,\n        serializedName: 'name',\n        type: {\n          name: 'String'\n        }\n      },\n      display: {\n        required: false,\n        serializedName: 'display',\n        type: {\n          name: 'Composite',\n          className: 'OperationDisplay'\n        }\n      },\n      origin: {\n        required: false,\n        serializedName: 'origin',\n        type: {\n          name: 'String'\n        }\n      },\n      properties: {\n        required: false,\n        serializedName: 'properties',\n        type: {\n          name: 'Object'\n        }\n      }\n    }\n  }\n};\n\nexport const CheckNameAvailabilityParameters = {\n  required: false,\n  serializedName: 'CheckNameAvailabilityParameters',\n  type: {\n    name: 'Composite',\n    className: 'CheckNameAvailabilityParameters',\n    modelProperties: {\n      name: {\n        required: true,\n        serializedName: 'name',\n        type: {\n          name: 'String'\n        }\n      },\n      type: {\n        required: true,\n        isConstant: true,\n        serializedName: 'type',\n        defaultValue: 'Microsoft.Batch/batchAccounts',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\nexport const CheckNameAvailabilityResult = {\n  required: false,\n  serializedName: 'CheckNameAvailabilityResult',\n  type: {\n    name: 'Composite',\n    className: 'CheckNameAvailabilityResult',\n    modelProperties: {\n      nameAvailable: {\n        required: false,\n        readOnly: true,\n        serializedName: 'nameAvailable',\n        type: {\n          name: 'Boolean'\n        }\n      },\n      reason: {\n        required: false,\n        readOnly: true,\n        serializedName: 'reason',\n        type: {\n          name: 'Enum',\n          allowedValues: [ 'Invalid', 'AlreadyExists' ]\n        }\n      },\n      message: {\n        required: false,\n        readOnly: true,\n        serializedName: 'message',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\nexport const ApplicationCreateOptionalParams = {\n  required: false,\n  serializedName: 'CreateOptions',\n  type: {\n    name: 'Composite',\n    className: 'ApplicationCreateOptionalParams',\n    modelProperties: {\n      parameters: {\n        required: false,\n        serializedName: 'parameters',\n        type: {\n          name: 'Composite',\n          className: 'ApplicationCreateParameters'\n        }\n      }\n    }\n  }\n};\n\nexport const ApplicationListOptionalParams = {\n  required: false,\n  serializedName: 'ListOptions',\n  type: {\n    name: 'Composite',\n    className: 'ApplicationListOptionalParams',\n    modelProperties: {\n      maxresults: {\n        required: false,\n        serializedName: 'maxresults',\n        type: {\n          name: 'Number'\n        }\n      }\n    }\n  }\n};\n\nexport const BatchAccountListResult = {\n  required: false,\n  serializedName: 'BatchAccountListResult',\n  type: {\n    name: 'Composite',\n    className: 'BatchAccountListResult',\n    modelProperties: {\n      value: {\n        required: false,\n        serializedName: '',\n        type: {\n          name: 'Sequence',\n          element: {\n              required: false,\n              serializedName: 'BatchAccountElementType',\n              type: {\n                name: 'Composite',\n                className: 'BatchAccount'\n              }\n          }\n        }\n      },\n      nextLink: {\n        required: false,\n        serializedName: 'nextLink',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\nexport const ListApplicationsResult = {\n  required: false,\n  serializedName: 'ListApplicationsResult',\n  type: {\n    name: 'Composite',\n    className: 'ListApplicationsResult',\n    modelProperties: {\n      value: {\n        required: false,\n        serializedName: '',\n        type: {\n          name: 'Sequence',\n          element: {\n              required: false,\n              serializedName: 'ApplicationElementType',\n              type: {\n                name: 'Composite',\n                className: 'Application'\n              }\n          }\n        }\n      },\n      nextLink: {\n        required: false,\n        serializedName: 'nextLink',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\nexport const OperationListResult = {\n  required: false,\n  serializedName: 'OperationListResult',\n  type: {\n    name: 'Composite',\n    className: 'OperationListResult',\n    modelProperties: {\n      value: {\n        required: false,\n        serializedName: '',\n        type: {\n          name: 'Sequence',\n          element: {\n              required: false,\n              serializedName: 'OperationElementType',\n              type: {\n                name: 'Composite',\n                className: 'Operation'\n              }\n          }\n        }\n      },\n      nextLink: {\n        required: false,\n        serializedName: 'nextLink',\n        type: {\n          name: 'String'\n        }\n      }\n    }\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/models/mappers.ts","module.exports = msRest;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"msRest\"\n// module id = 1\n// module chunks = 0","module.exports = msRestAzure;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"msRestAzure\"\n// module id = 2\n// module chunks = 0","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as msRest from \"ms-rest-js\";\nimport * as msRestAzure from \"ms-rest-azure-js\";\nimport * as operations from \"./operations\";\n\nconst packageName = \"azure-arm-batch-js\";\nconst packageVersion = \"0.1.0\";\n\nclass BatchManagementClient extends msRestAzure.AzureServiceClient {\n\n  credentials: msRest.ServiceClientCredentials;\n\n  subscriptionId: string;\n\n  apiVersion: string;\n\n  acceptLanguage: string;\n\n  longRunningOperationRetryTimeout: number;\n\n  generateClientRequestId: boolean;\n  baseUri: string;\n\n  // Operation groups\n  batchAccount: operations.BatchAccountOperations;\n  applicationPackage: operations.ApplicationPackageOperations;\n  application: operations.ApplicationOperations;\n  location: operations.Location;\n  operations: operations.Operations;\n  serializer: msRest.Serializer;\n\n  /**\n   * @class\n   * Initializes a new instance of the BatchManagementClient class.\n   * @constructor\n   *\n   * @param {msRest.ServiceClientCredentials} credentials - Credentials needed for the client to connect to Azure.\n   *\n   * @param {string} subscriptionId - The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)\n   *\n   * @param {string} [baseUri] - The base URI of the service.\n   *\n   * @param {object} [options] - The parameter options\n   *\n   * @param {Array} [options.filters] - Filters to be added to the request pipeline\n   *\n   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at\n   * {@link https://github.github.io/fetch/#Request Options doc}\n   *\n   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy\n   *\n   * @param {string} [options.acceptLanguage] - Gets or sets the preferred language for the response.\n   *\n   * @param {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.\n   *\n   * @param {boolean} [options.generateClientRequestId] - When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.\n   *\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, baseUri?: string, options?: msRestAzure.AzureServiceClientOptions) {\n    if (credentials === null || credentials === undefined) {\n      throw new Error('\\'credentials\\' cannot be null.');\n    }\n    if (subscriptionId === null || subscriptionId === undefined) {\n      throw new Error('\\'subscriptionId\\' cannot be null.');\n    }\n\n    if (!options) options = {};\n\n    super(credentials, options);\n\n    this.apiVersion = '2017-05-01';\n    this.acceptLanguage = 'en-US';\n    this.longRunningOperationRetryTimeout = 30;\n    this.generateClientRequestId = true;\n    this.baseUri = baseUri as string;\n    if (!this.baseUri) {\n      this.baseUri = 'https://management.azure.com';\n    }\n    this.credentials = credentials;\n    this.subscriptionId = subscriptionId;\n\n    this.addUserAgentInfo(`${packageName}/${packageVersion}`);\n    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {\n      this.acceptLanguage = options.acceptLanguage;\n    }\n    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {\n      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;\n    }\n    if(options.generateClientRequestId !== null && options.generateClientRequestId !== undefined) {\n      this.generateClientRequestId = options.generateClientRequestId;\n    }\n    this.batchAccount = new operations.BatchAccountOperations(this);\n    this.applicationPackage = new operations.ApplicationPackageOperations(this);\n    this.application = new operations.ApplicationOperations(this);\n    this.location = new operations.Location(this);\n    this.operations = new operations.Operations(this);\n    this.serializer = new msRest.Serializer(Mappers);\n  }\n}\n\nexport { BatchManagementClient, Models as BatchManagementModels, Mappers as BatchManagementMappers };\n\n\n\n// WEBPACK FOOTER //\n// ./lib/batchManagementClient.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport { BaseResource, CloudError } from \"ms-rest-azure-js\";\nimport { RequestOptionsBase } from \"ms-rest-js\";\n\nexport { BaseResource, CloudError };\n\n\n/**\n * @interface\n * An interface representing AutoStorageBaseProperties.\n * The properties related to the auto-storage account.\n *\n */\nexport interface AutoStorageBaseProperties {\n  /**\n   * @member {string} storageAccountId The resource ID of the storage account\n   * to be used for auto-storage account.\n   */\n  storageAccountId: string;\n}\n\n/**\n * @interface\n * An interface representing KeyVaultReference.\n * Identifies the Azure key vault associated with a Batch account.\n *\n */\nexport interface KeyVaultReference {\n  /**\n   * @member {string} id The resource ID of the Azure key vault associated with\n   * the Batch account.\n   */\n  id: string;\n  /**\n   * @member {string} url The URL of the Azure key vault associated with the\n   * Batch account.\n   */\n  url: string;\n}\n\n/**\n * @interface\n * An interface representing BatchAccountCreateParameters.\n * Parameters supplied to the Create operation.\n *\n */\nexport interface BatchAccountCreateParameters {\n  /**\n   * @member {string} location The region in which to create the account.\n   */\n  location: string;\n  /**\n   * @member {{ [propertyName: string]: string }} [tags] The user-specified\n   * tags associated with the account.\n   */\n  tags?: { [propertyName: string]: string };\n  /**\n   * @member {AutoStorageBaseProperties} [autoStorage] The properties related\n   * to the auto-storage account.\n   */\n  autoStorage?: AutoStorageBaseProperties;\n  /**\n   * @member {PoolAllocationMode} [poolAllocationMode] The allocation mode to\n   * use for creating pools in the Batch account. The pool allocation mode also\n   * affects how clients may authenticate to the Batch Service API. If the mode\n   * is BatchService, clients may authenticate using access keys or Azure\n   * Active Directory. If the mode is UserSubscription, clients must use Azure\n   * Active Directory. The default is BatchService. Possible values include:\n   * 'BatchService', 'UserSubscription'\n   */\n  poolAllocationMode?: PoolAllocationMode;\n  /**\n   * @member {KeyVaultReference} [keyVaultReference] A reference to the Azure\n   * key vault associated with the Batch account.\n   */\n  keyVaultReference?: KeyVaultReference;\n}\n\n/**\n * @interface\n * An interface representing AutoStorageProperties.\n * Contains information about the auto-storage account associated with a Batch\n * account.\n *\n * @extends AutoStorageBaseProperties\n */\nexport interface AutoStorageProperties extends AutoStorageBaseProperties {\n  /**\n   * @member {Date} lastKeySync The UTC time at which storage keys were last\n   * synchronized with the Batch account.\n   */\n  lastKeySync: Date;\n}\n\n/**\n * @interface\n * An interface representing Resource.\n * A definition of an Azure resource.\n *\n * @extends BaseResource\n */\nexport interface Resource extends BaseResource {\n  /**\n   * @member {string} [id] The ID of the resource.\n   */\n  readonly id?: string;\n  /**\n   * @member {string} [name] The name of the resource.\n   */\n  readonly name?: string;\n  /**\n   * @member {string} [type] The type of the resource.\n   */\n  readonly type?: string;\n  /**\n   * @member {string} [location] The location of the resource.\n   */\n  readonly location?: string;\n  /**\n   * @member {{ [propertyName: string]: string }} [tags] The tags of the\n   * resource.\n   */\n  readonly tags?: { [propertyName: string]: string };\n}\n\n/**\n * @interface\n * An interface representing BatchAccount.\n * Contains information about an Azure Batch account.\n *\n * @extends Resource\n */\nexport interface BatchAccount extends Resource {\n  /**\n   * @member {string} [accountEndpoint] The account endpoint used to interact\n   * with the Batch service.\n   */\n  readonly accountEndpoint?: string;\n  /**\n   * @member {ProvisioningState} [provisioningState] The provisioned state of\n   * the resource. Possible values include: 'Invalid', 'Creating', 'Deleting',\n   * 'Succeeded', 'Failed', 'Cancelled'\n   */\n  readonly provisioningState?: ProvisioningState;\n  /**\n   * @member {PoolAllocationMode} [poolAllocationMode] The allocation mode to\n   * use for creating pools in the Batch account. Possible values include:\n   * 'BatchService', 'UserSubscription'\n   */\n  readonly poolAllocationMode?: PoolAllocationMode;\n  /**\n   * @member {KeyVaultReference} [keyVaultReference] A reference to the Azure\n   * key vault associated with the Batch account.\n   */\n  readonly keyVaultReference?: KeyVaultReference;\n  /**\n   * @member {AutoStorageProperties} [autoStorage] The properties and status of\n   * any auto-storage account associated with the Batch account.\n   */\n  readonly autoStorage?: AutoStorageProperties;\n  /**\n   * @member {number} [dedicatedCoreQuota] The dedicated core quota for this\n   * Batch account.\n   */\n  readonly dedicatedCoreQuota?: number;\n  /**\n   * @member {number} [lowPriorityCoreQuota] The low-priority core quota for\n   * this Batch account.\n   */\n  readonly lowPriorityCoreQuota?: number;\n  /**\n   * @member {number} [poolQuota] The pool quota for this Batch account.\n   */\n  readonly poolQuota?: number;\n  /**\n   * @member {number} [activeJobAndJobScheduleQuota] The active job and job\n   * schedule quota for this Batch account.\n   */\n  readonly activeJobAndJobScheduleQuota?: number;\n}\n\n/**\n * @interface\n * An interface representing BatchAccountUpdateParameters.\n * Parameters for updating an Azure Batch account.\n *\n */\nexport interface BatchAccountUpdateParameters {\n  /**\n   * @member {{ [propertyName: string]: string }} [tags] The user-specified\n   * tags associated with the account.\n   */\n  tags?: { [propertyName: string]: string };\n  /**\n   * @member {AutoStorageBaseProperties} [autoStorage] The properties related\n   * to the auto-storage account.\n   */\n  autoStorage?: AutoStorageBaseProperties;\n}\n\n/**\n * @interface\n * An interface representing BatchAccountRegenerateKeyParameters.\n * Parameters supplied to the RegenerateKey operation.\n *\n */\nexport interface BatchAccountRegenerateKeyParameters {\n  /**\n   * @member {AccountKeyType} keyName The type of account key to regenerate.\n   * Possible values include: 'Primary', 'Secondary'\n   */\n  keyName: AccountKeyType;\n}\n\n/**\n * @interface\n * An interface representing BatchAccountKeys.\n * A set of Azure Batch account keys.\n *\n */\nexport interface BatchAccountKeys {\n  /**\n   * @member {string} [accountName] The Batch account name.\n   */\n  readonly accountName?: string;\n  /**\n   * @member {string} [primary] The primary key associated with the account.\n   */\n  readonly primary?: string;\n  /**\n   * @member {string} [secondary] The secondary key associated with the\n   * account.\n   */\n  readonly secondary?: string;\n}\n\n/**\n * @interface\n * An interface representing ActivateApplicationPackageParameters.\n * Parameters for an activating an application package.\n *\n */\nexport interface ActivateApplicationPackageParameters {\n  /**\n   * @member {string} format The format of the application package binary file.\n   */\n  format: string;\n}\n\n/**\n * @interface\n * An interface representing ApplicationCreateParameters.\n * Parameters for adding an Application.\n *\n */\nexport interface ApplicationCreateParameters {\n  /**\n   * @member {boolean} [allowUpdates] A value indicating whether packages\n   * within the application may be overwritten using the same version string.\n   */\n  allowUpdates?: boolean;\n  /**\n   * @member {string} [displayName] The display name for the application.\n   */\n  displayName?: string;\n}\n\n/**\n * @interface\n * An interface representing ApplicationPackage.\n * An application package which represents a particular version of an\n * application.\n *\n */\nexport interface ApplicationPackage {\n  /**\n   * @member {string} [id] The ID of the application.\n   */\n  readonly id?: string;\n  /**\n   * @member {string} [version] The version of the application package.\n   */\n  readonly version?: string;\n  /**\n   * @member {PackageState} [state] The current state of the application\n   * package. Possible values include: 'pending', 'active', 'unmapped'\n   */\n  readonly state?: PackageState;\n  /**\n   * @member {string} [format] The format of the application package, if the\n   * package is active.\n   */\n  readonly format?: string;\n  /**\n   * @member {string} [storageUrl] The URL for the application package in Azure\n   * Storage.\n   */\n  readonly storageUrl?: string;\n  /**\n   * @member {Date} [storageUrlExpiry] The UTC time at which the Azure Storage\n   * URL will expire.\n   */\n  readonly storageUrlExpiry?: Date;\n  /**\n   * @member {Date} [lastActivationTime] The time at which the package was last\n   * activated, if the package is active.\n   */\n  readonly lastActivationTime?: Date;\n}\n\n/**\n * @interface\n * An interface representing Application.\n * Contains information about an application in a Batch account.\n *\n */\nexport interface Application {\n  /**\n   * @member {string} [id] A string that uniquely identifies the application\n   * within the account.\n   */\n  id?: string;\n  /**\n   * @member {string} [displayName] The display name for the application.\n   */\n  displayName?: string;\n  /**\n   * @member {ApplicationPackage[]} [packages] The list of packages under this\n   * application.\n   */\n  packages?: ApplicationPackage[];\n  /**\n   * @member {boolean} [allowUpdates] A value indicating whether packages\n   * within the application may be overwritten using the same version string.\n   */\n  allowUpdates?: boolean;\n  /**\n   * @member {string} [defaultVersion] The package to use if a client requests\n   * the application but does not specify a version.\n   */\n  defaultVersion?: string;\n}\n\n/**\n * @interface\n * An interface representing ApplicationUpdateParameters.\n * Parameters for an update application request.\n *\n */\nexport interface ApplicationUpdateParameters {\n  /**\n   * @member {boolean} [allowUpdates] A value indicating whether packages\n   * within the application may be overwritten using the same version string.\n   */\n  allowUpdates?: boolean;\n  /**\n   * @member {string} [defaultVersion] The package to use if a client requests\n   * the application but does not specify a version.\n   */\n  defaultVersion?: string;\n  /**\n   * @member {string} [displayName] The display name for the application.\n   */\n  displayName?: string;\n}\n\n/**\n * @interface\n * An interface representing BatchLocationQuota.\n * Quotas associated with a Batch region for a particular subscription.\n *\n */\nexport interface BatchLocationQuota {\n  /**\n   * @member {number} [accountQuota] The number of Batch accounts that may be\n   * created under the subscription in the specified region.\n   */\n  readonly accountQuota?: number;\n}\n\n/**\n * @interface\n * An interface representing OperationDisplay.\n * @summary The object that describes the operation.\n *\n */\nexport interface OperationDisplay {\n  /**\n   * @member {string} [provider] Friendly name of the resource provider.\n   */\n  provider?: string;\n  /**\n   * @member {string} [operation] The operation type. For example: read, write,\n   * delete, or listKeys/action\n   */\n  operation?: string;\n  /**\n   * @member {string} [resource] The resource type on which the operation is\n   * performed.\n   */\n  resource?: string;\n  /**\n   * @member {string} [description] The friendly name of the operation.\n   */\n  description?: string;\n}\n\n/**\n * @interface\n * An interface representing Operation.\n * @summary A REST API operation\n *\n */\nexport interface Operation {\n  /**\n   * @member {string} [name] The operation name. This is of the format\n   * {provider}/{resource}/{operation}\n   */\n  name?: string;\n  /**\n   * @member {OperationDisplay} [display] The object that describes the\n   * operation.\n   */\n  display?: OperationDisplay;\n  /**\n   * @member {string} [origin] The intended executor of the operation.\n   */\n  origin?: string;\n  /**\n   * @member {any} [properties] Properties of the operation.\n   */\n  properties?: any;\n}\n\n/**\n * @interface\n * An interface representing CheckNameAvailabilityParameters.\n * Parameters for a check name availability request.\n *\n */\nexport interface CheckNameAvailabilityParameters {\n  /**\n   * @member {string} name The name to check for availability\n   */\n  name: string;\n}\n\n/**\n * @interface\n * An interface representing CheckNameAvailabilityResult.\n * The CheckNameAvailability operation response.\n *\n */\nexport interface CheckNameAvailabilityResult {\n  /**\n   * @member {boolean} [nameAvailable] Gets a boolean value that indicates\n   * whether the name is available for you to use. If true, the name is\n   * available. If false, the name has already been taken or invalid and cannot\n   * be used.\n   */\n  readonly nameAvailable?: boolean;\n  /**\n   * @member {NameAvailabilityReason} [reason] Gets the reason that a Batch\n   * account name could not be used. The Reason element is only returned if\n   * NameAvailable is false. Possible values include: 'Invalid',\n   * 'AlreadyExists'\n   */\n  readonly reason?: NameAvailabilityReason;\n  /**\n   * @member {string} [message] Gets an error message explaining the Reason\n   * value in more detail.\n   */\n  readonly message?: string;\n}\n\n/**\n * @interface\n * An interface representing ApplicationCreateOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface ApplicationCreateOptionalParams extends RequestOptionsBase {\n  /**\n   * @member {ApplicationCreateParameters} [parameters] The parameters for the\n   * request.\n   */\n  parameters?: ApplicationCreateParameters;\n}\n\n/**\n * @interface\n * An interface representing ApplicationListOptionalParams.\n * Optional Parameters.\n *\n * @extends RequestOptionsBase\n */\nexport interface ApplicationListOptionalParams extends RequestOptionsBase {\n  /**\n   * @member {number} [maxresults] The maximum number of items to return in the\n   * response.\n   */\n  maxresults?: number;\n}\n\n\n/**\n * @interface\n * An interface representing the BatchAccountListResult.\n * Values returned by the List operation.\n *\n * @extends Array<BatchAccount>\n */\nexport interface BatchAccountListResult extends Array<BatchAccount> {\n  /**\n   * @member {string} [nextLink] The continuation token.\n   */\n  nextLink?: string;\n}\n\n/**\n * @interface\n * An interface representing the ListApplicationsResult.\n * The result of performing list applications.\n *\n * @extends Array<Application>\n */\nexport interface ListApplicationsResult extends Array<Application> {\n  /**\n   * @member {string} [nextLink] The URL to get the next set of results.\n   */\n  nextLink?: string;\n}\n\n/**\n * @interface\n * An interface representing the OperationListResult.\n * @summary Result of the request to list REST API operations. It contains a\n * list of operations and a URL nextLink to get the next set of results.\n *\n * @extends Array<Operation>\n */\nexport interface OperationListResult extends Array<Operation> {\n  /**\n   * @member {string} [nextLink]\n   */\n  nextLink?: string;\n}\n\n/**\n * Defines values for PoolAllocationMode.\n * Possible values include: 'BatchService', 'UserSubscription'\n * @readonly\n * @enum {string}\n */\nexport enum PoolAllocationMode {\n  BatchService = 'BatchService',\n  UserSubscription = 'UserSubscription',\n}\n\n/**\n * Defines values for ProvisioningState.\n * Possible values include: 'Invalid', 'Creating', 'Deleting', 'Succeeded',\n * 'Failed', 'Cancelled'\n * @readonly\n * @enum {string}\n */\nexport enum ProvisioningState {\n  Invalid = 'Invalid',\n  Creating = 'Creating',\n  Deleting = 'Deleting',\n  Succeeded = 'Succeeded',\n  Failed = 'Failed',\n  Cancelled = 'Cancelled',\n}\n\n/**\n * Defines values for AccountKeyType.\n * Possible values include: 'Primary', 'Secondary'\n * @readonly\n * @enum {string}\n */\nexport enum AccountKeyType {\n  Primary = 'Primary',\n  Secondary = 'Secondary',\n}\n\n/**\n * Defines values for PackageState.\n * Possible values include: 'pending', 'active', 'unmapped'\n * @readonly\n * @enum {string}\n */\nexport enum PackageState {\n  Pending = 'pending',\n  Active = 'active',\n  Unmapped = 'unmapped',\n}\n\n/**\n * Defines values for NameAvailabilityReason.\n * Possible values include: 'Invalid', 'AlreadyExists'\n * @readonly\n * @enum {string}\n */\nexport enum NameAvailabilityReason {\n  Invalid = 'Invalid',\n  AlreadyExists = 'AlreadyExists',\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/models/index.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport { BatchAccountOperations } from \"./batchAccountOperations\";\nimport { ApplicationPackageOperations } from \"./applicationPackageOperations\";\nimport { ApplicationOperations } from \"./applicationOperations\";\nimport { Location } from \"./location\";\nimport { Operations } from \"./operations\";\n\nexport { BatchAccountOperations, ApplicationPackageOperations, ApplicationOperations,\nLocation, Operations };\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/index.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/mappers\";\nimport { BatchManagementClient } from \"../batchManagementClient\";\n\nconst WebResource = msRest.WebResource;\n\n/** Class representing a BatchAccountOperations. */\nexport class BatchAccountOperations {\n  private readonly client: BatchManagementClient;\n  /**\n   * Create a BatchAccountOperations.\n   * @param {BatchManagementClient} client Reference to the service client.\n   */\n  constructor(client: BatchManagementClient) {\n    this.client = client;\n  }\n\n\n  /**\n   * Creates a new Batch account with the specified parameters. Existing accounts\n   * cannot be updated with this API and should instead be updated with the\n   * Update Batch Account API.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName A name for the Batch account which must be\n   * unique within the region. Batch account names must be between 3 and 24\n   * characters in length and must use only numbers and lowercase letters. This\n   * name is used as part of the DNS name that is used to access the Batch\n   * service in the region in which the account is created. For example:\n   * http://accountname.region.batch.azure.com/.\n   *\n   * @param {BatchAccountCreateParameters} parameters Additional parameters for\n   * account creation.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async createWithHttpOperationResponse(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountCreateParameters, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Send request\n    let initialResult: msRest.HttpOperationResponse;\n    try {\n      initialResult = await this.beginCreateWithHttpOperationResponse(resourceGroupName, accountName, parameters, options);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\n      let httpRequest = operationRes.request;\n      let response = operationRes.response;\n\n      // Deserialize Response\n      let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n      try {\n        if (parsedResponse !== null && parsedResponse !== undefined) {\n          let resultMapper = Mappers.BatchAccount;\n          operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n        }\n      } catch (error) {\n        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n        deserializationError.request = msRest.stripRequest(httpRequest);\n        deserializationError.response = msRest.stripResponse(response);\n        return Promise.reject(deserializationError);\n      }\n  } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Updates the properties of an existing Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {BatchAccountUpdateParameters} parameters Additional parameters for\n   * account update.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async updateWithHttpOperationResponse(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (parameters === null || parameters === undefined) {\n        throw new Error('parameters cannot be null or undefined.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'PATCH';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    // Serialize Request\n    let requestContent = null;\n    let requestModel = null;\n    try {\n      if (parameters !== null && parameters !== undefined) {\n        let requestModelMapper = Mappers.BatchAccountUpdateParameters;\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\n        requestContent = JSON.stringify(requestModel);\n      }\n    } catch (error) {\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\n      return Promise.reject(serializationError);\n    }\n    httpRequest.body = requestContent;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.BatchAccount;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n\n  /**\n   * Deletes the specified Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async deleteMethodWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Send request\n    let initialResult: msRest.HttpOperationResponse;\n    try {\n      initialResult = await this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, accountName, options);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.getLongRunningOperationResult(initialResult, options);\n\n      // Deserialize Response\n  } catch (err) {\n      return Promise.reject(err);\n    }\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Gets information about the specified Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async getWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'GET';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.BatchAccount;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Gets information about the Batch accounts associated with the subscription.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async listWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Batch/batchAccounts';\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'GET';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.BatchAccountListResult;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Gets information about the Batch accounts associated with the specified\n   * resource group.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'GET';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.BatchAccountListResult;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Synchronizes access keys for the auto-storage account configured for the\n   * specified Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async synchronizeAutoStorageKeysWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/syncAutoStorageKeys';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'POST';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 204) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Regenerates the specified account key for the Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {AccountKeyType} keyName The type of account key to regenerate.\n   * Possible values include: 'Primary', 'Secondary'\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async regenerateKeyWithHttpOperationResponse(resourceGroupName: string, accountName: string, keyName: Models.AccountKeyType, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (keyName) {\n        let allowedValues = [ 'Primary', 'Secondary' ];\n        if (!allowedValues.some( function(item) { return item === keyName; })) {\n          throw new Error(keyName + ' is not a valid value. The valid values are: ' + allowedValues);\n        }\n      } else {\n        throw new Error('keyName cannot be null or undefined.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    let parameters: any\n    if (keyName !== null && keyName !== undefined) {\n      parameters = {};\n      parameters.keyName = keyName;\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/regenerateKeys';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'POST';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    // Serialize Request\n    let requestContent = null;\n    let requestModel = null;\n    try {\n      if (parameters !== null && parameters !== undefined) {\n        let requestModelMapper = Mappers.BatchAccountRegenerateKeyParameters;\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\n        requestContent = JSON.stringify(requestModel);\n      }\n    } catch (error) {\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\n      return Promise.reject(serializationError);\n    }\n    httpRequest.body = requestContent;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.BatchAccountKeys;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * @summary Gets the account keys for the specified Batch account.\n   *\n   * This operation applies only to Batch accounts created with a\n   * poolAllocationMode of 'BatchService'. If the Batch account was created with\n   * a poolAllocationMode of 'UserSubscription', clients cannot use access to\n   * keys to authenticate, and must use Azure Active Directory instead. In this\n   * case, getting the keys will fail.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async getKeysWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/listKeys';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'POST';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.BatchAccountKeys;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Creates a new Batch account with the specified parameters. Existing accounts\n   * cannot be updated with this API and should instead be updated with the\n   * Update Batch Account API.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName A name for the Batch account which must be\n   * unique within the region. Batch account names must be between 3 and 24\n   * characters in length and must use only numbers and lowercase letters. This\n   * name is used as part of the DNS name that is used to access the Batch\n   * service in the region in which the account is created. For example:\n   * http://accountname.region.batch.azure.com/.\n   *\n   * @param {BatchAccountCreateParameters} parameters Additional parameters for\n   * account creation.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async beginCreateWithHttpOperationResponse(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountCreateParameters, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (parameters === null || parameters === undefined) {\n        throw new Error('parameters cannot be null or undefined.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'PUT';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    // Serialize Request\n    let requestContent = null;\n    let requestModel = null;\n    try {\n      if (parameters !== null && parameters !== undefined) {\n        let requestModelMapper = Mappers.BatchAccountCreateParameters;\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\n        requestContent = JSON.stringify(requestModel);\n      }\n    } catch (error) {\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\n      return Promise.reject(serializationError);\n    }\n    httpRequest.body = requestContent;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200 && statusCode !== 202) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.BatchAccount;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Deletes the specified Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'DELETE';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Gets information about the Batch accounts associated with the subscription.\n   *\n   * @param {string} nextPageLink The NextLink from the previous successful call\n   * to List operation.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async listNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let requestUrl = '{nextLink}';\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'GET';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.BatchAccountListResult;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Gets information about the Batch accounts associated with the specified\n   * resource group.\n   *\n   * @param {string} nextPageLink The NextLink from the previous successful call\n   * to List operation.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let requestUrl = '{nextLink}';\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'GET';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.BatchAccountListResult;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Creates a new Batch account with the specified parameters. Existing accounts\n   * cannot be updated with this API and should instead be updated with the\n   * Update Batch Account API.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName A name for the Batch account which must be\n   * unique within the region. Batch account names must be between 3 and 24\n   * characters in length and must use only numbers and lowercase letters. This\n   * name is used as part of the DNS name that is used to access the Batch\n   * service in the region in which the account is created. For example:\n   * http://accountname.region.batch.azure.com/.\n   *\n   * @param {BatchAccountCreateParameters} parameters Additional parameters for\n   * account creation.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.BatchAccount} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.BatchAccount} for more information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  create(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountCreateParameters): Promise<Models.BatchAccount>;\n  create(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountCreateParameters, options: msRest.RequestOptionsBase): Promise<Models.BatchAccount>;\n  create(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountCreateParameters, callback: msRest.ServiceCallback<Models.BatchAccount>): void;\n  create(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountCreateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchAccount>): void;\n  create(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountCreateParameters, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BatchAccount>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.BatchAccount>;\n    if (!callback) {\n      return this.createWithHttpOperationResponse(resourceGroupName, accountName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.BatchAccount);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.createWithHttpOperationResponse(resourceGroupName, accountName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.BatchAccount;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Updates the properties of an existing Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {BatchAccountUpdateParameters} parameters Additional parameters for\n   * account update.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.BatchAccount} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.BatchAccount} for more information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  update(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountUpdateParameters): Promise<Models.BatchAccount>;\n  update(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountUpdateParameters, options: msRest.RequestOptionsBase): Promise<Models.BatchAccount>;\n  update(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountUpdateParameters, callback: msRest.ServiceCallback<Models.BatchAccount>): void;\n  update(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchAccount>): void;\n  update(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountUpdateParameters, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BatchAccount>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.BatchAccount>;\n    if (!callback) {\n      return this.updateWithHttpOperationResponse(resourceGroupName, accountName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.BatchAccount);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.updateWithHttpOperationResponse(resourceGroupName, accountName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.BatchAccount;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Deletes the specified Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  deleteMethod(resourceGroupName: string, accountName: string): Promise<void>;\n  deleteMethod(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase): Promise<void>;\n  deleteMethod(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.deleteMethodWithHttpOperationResponse(resourceGroupName, accountName, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(resourceGroupName, accountName, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as void;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Gets information about the specified Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.BatchAccount} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.BatchAccount} for more information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  get(resourceGroupName: string, accountName: string): Promise<Models.BatchAccount>;\n  get(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase): Promise<Models.BatchAccount>;\n  get(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.BatchAccount>): void;\n  get(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchAccount>): void;\n  get(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BatchAccount>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.BatchAccount>;\n    if (!callback) {\n      return this.getWithHttpOperationResponse(resourceGroupName, accountName, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.BatchAccount);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(resourceGroupName, accountName, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.BatchAccount;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Gets information about the Batch accounts associated with the subscription.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.BatchAccountListResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.BatchAccountListResult} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  list(): Promise<Models.BatchAccountListResult>;\n  list(options: msRest.RequestOptionsBase): Promise<Models.BatchAccountListResult>;\n  list(callback: msRest.ServiceCallback<Models.BatchAccountListResult>): void;\n  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchAccountListResult>): void;\n  list(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BatchAccountListResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.BatchAccountListResult>;\n    if (!callback) {\n      return this.listWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.BatchAccountListResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.listWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.BatchAccountListResult;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Gets information about the Batch accounts associated with the specified\n   * resource group.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.BatchAccountListResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.BatchAccountListResult} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  listByResourceGroup(resourceGroupName: string): Promise<Models.BatchAccountListResult>;\n  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase): Promise<Models.BatchAccountListResult>;\n  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.BatchAccountListResult>): void;\n  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchAccountListResult>): void;\n  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BatchAccountListResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.BatchAccountListResult>;\n    if (!callback) {\n      return this.listByResourceGroupWithHttpOperationResponse(resourceGroupName, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.BatchAccountListResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.listByResourceGroupWithHttpOperationResponse(resourceGroupName, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.BatchAccountListResult;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Synchronizes access keys for the auto-storage account configured for the\n   * specified Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  synchronizeAutoStorageKeys(resourceGroupName: string, accountName: string): Promise<void>;\n  synchronizeAutoStorageKeys(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase): Promise<void>;\n  synchronizeAutoStorageKeys(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<void>): void;\n  synchronizeAutoStorageKeys(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  synchronizeAutoStorageKeys(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.synchronizeAutoStorageKeysWithHttpOperationResponse(resourceGroupName, accountName, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.synchronizeAutoStorageKeysWithHttpOperationResponse(resourceGroupName, accountName, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as void;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Regenerates the specified account key for the Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {AccountKeyType} keyName The type of account key to regenerate.\n   * Possible values include: 'Primary', 'Secondary'\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.BatchAccountKeys} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.BatchAccountKeys} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  regenerateKey(resourceGroupName: string, accountName: string, keyName: Models.AccountKeyType): Promise<Models.BatchAccountKeys>;\n  regenerateKey(resourceGroupName: string, accountName: string, keyName: Models.AccountKeyType, options: msRest.RequestOptionsBase): Promise<Models.BatchAccountKeys>;\n  regenerateKey(resourceGroupName: string, accountName: string, keyName: Models.AccountKeyType, callback: msRest.ServiceCallback<Models.BatchAccountKeys>): void;\n  regenerateKey(resourceGroupName: string, accountName: string, keyName: Models.AccountKeyType, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchAccountKeys>): void;\n  regenerateKey(resourceGroupName: string, accountName: string, keyName: Models.AccountKeyType, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BatchAccountKeys>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.BatchAccountKeys>;\n    if (!callback) {\n      return this.regenerateKeyWithHttpOperationResponse(resourceGroupName, accountName, keyName, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.BatchAccountKeys);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.regenerateKeyWithHttpOperationResponse(resourceGroupName, accountName, keyName, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.BatchAccountKeys;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * @summary Gets the account keys for the specified Batch account.\n   *\n   * This operation applies only to Batch accounts created with a\n   * poolAllocationMode of 'BatchService'. If the Batch account was created with\n   * a poolAllocationMode of 'UserSubscription', clients cannot use access to\n   * keys to authenticate, and must use Azure Active Directory instead. In this\n   * case, getting the keys will fail.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.BatchAccountKeys} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.BatchAccountKeys} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getKeys(resourceGroupName: string, accountName: string): Promise<Models.BatchAccountKeys>;\n  getKeys(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase): Promise<Models.BatchAccountKeys>;\n  getKeys(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.BatchAccountKeys>): void;\n  getKeys(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchAccountKeys>): void;\n  getKeys(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BatchAccountKeys>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.BatchAccountKeys>;\n    if (!callback) {\n      return this.getKeysWithHttpOperationResponse(resourceGroupName, accountName, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.BatchAccountKeys);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getKeysWithHttpOperationResponse(resourceGroupName, accountName, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.BatchAccountKeys;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Creates a new Batch account with the specified parameters. Existing accounts\n   * cannot be updated with this API and should instead be updated with the\n   * Update Batch Account API.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName A name for the Batch account which must be\n   * unique within the region. Batch account names must be between 3 and 24\n   * characters in length and must use only numbers and lowercase letters. This\n   * name is used as part of the DNS name that is used to access the Batch\n   * service in the region in which the account is created. For example:\n   * http://accountname.region.batch.azure.com/.\n   *\n   * @param {BatchAccountCreateParameters} parameters Additional parameters for\n   * account creation.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.BatchAccount} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.BatchAccount} for more information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  beginCreate(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountCreateParameters): Promise<Models.BatchAccount>;\n  beginCreate(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountCreateParameters, options: msRest.RequestOptionsBase): Promise<Models.BatchAccount>;\n  beginCreate(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountCreateParameters, callback: msRest.ServiceCallback<Models.BatchAccount>): void;\n  beginCreate(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountCreateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchAccount>): void;\n  beginCreate(resourceGroupName: string, accountName: string, parameters: Models.BatchAccountCreateParameters, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BatchAccount>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.BatchAccount>;\n    if (!callback) {\n      return this.beginCreateWithHttpOperationResponse(resourceGroupName, accountName, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.BatchAccount);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.beginCreateWithHttpOperationResponse(resourceGroupName, accountName, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.BatchAccount;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Deletes the specified Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  beginDeleteMethod(resourceGroupName: string, accountName: string): Promise<void>;\n  beginDeleteMethod(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase): Promise<void>;\n  beginDeleteMethod(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<void>): void;\n  beginDeleteMethod(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  beginDeleteMethod(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, accountName, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.beginDeleteMethodWithHttpOperationResponse(resourceGroupName, accountName, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as void;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Gets information about the Batch accounts associated with the subscription.\n   *\n   * @param {string} nextPageLink The NextLink from the previous successful call\n   * to List operation.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.BatchAccountListResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.BatchAccountListResult} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  listNext(nextPageLink: string): Promise<Models.BatchAccountListResult>;\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.BatchAccountListResult>;\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BatchAccountListResult>): void;\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchAccountListResult>): void;\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BatchAccountListResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.BatchAccountListResult>;\n    if (!callback) {\n      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.BatchAccountListResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.BatchAccountListResult;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Gets information about the Batch accounts associated with the specified\n   * resource group.\n   *\n   * @param {string} nextPageLink The NextLink from the previous successful call\n   * to List operation.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.BatchAccountListResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.BatchAccountListResult} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  listByResourceGroupNext(nextPageLink: string): Promise<Models.BatchAccountListResult>;\n  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.BatchAccountListResult>;\n  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BatchAccountListResult>): void;\n  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchAccountListResult>): void;\n  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BatchAccountListResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.BatchAccountListResult>;\n    if (!callback) {\n      return this.listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.BatchAccountListResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.BatchAccountListResult;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/batchAccountOperations.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/mappers\";\nimport { BatchManagementClient } from \"../batchManagementClient\";\n\nconst WebResource = msRest.WebResource;\n\n/** Class representing a ApplicationPackageOperations. */\nexport class ApplicationPackageOperations {\n  private readonly client: BatchManagementClient;\n  /**\n   * Create a ApplicationPackageOperations.\n   * @param {BatchManagementClient} client Reference to the service client.\n   */\n  constructor(client: BatchManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Activates the specified application package.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {string} version The version of the application to activate.\n   *\n   * @param {string} format The format of the application package binary file.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async activateWithHttpOperationResponse(resourceGroupName: string, accountName: string, applicationId: string, version: string, format: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {\n        throw new Error('applicationId cannot be null or undefined and it must be of type string.');\n      }\n      if (version === null || version === undefined || typeof version.valueOf() !== 'string') {\n        throw new Error('version cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (format === null || format === undefined || typeof format.valueOf() !== 'string') {\n        throw new Error('format cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    let parameters: any\n    if (format !== null && format !== undefined) {\n      parameters = {};\n      parameters.format = format;\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}/activate';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));\n    requestUrl = requestUrl.replace('{version}', encodeURIComponent(version));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'POST';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    // Serialize Request\n    let requestContent = null;\n    let requestModel = null;\n    try {\n      if (parameters !== null && parameters !== undefined) {\n        let requestModelMapper = Mappers.ActivateApplicationPackageParameters;\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\n        requestContent = JSON.stringify(requestModel);\n      }\n    } catch (error) {\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\n      return Promise.reject(serializationError);\n    }\n    httpRequest.body = requestContent;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 204) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Creates an application package record.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {string} version The version of the application.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async createWithHttpOperationResponse(resourceGroupName: string, accountName: string, applicationId: string, version: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {\n        throw new Error('applicationId cannot be null or undefined and it must be of type string.');\n      }\n      if (version === null || version === undefined || typeof version.valueOf() !== 'string') {\n        throw new Error('version cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));\n    requestUrl = requestUrl.replace('{version}', encodeURIComponent(version));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'PUT';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 201) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 201) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.ApplicationPackage;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Deletes an application package record and its associated binary file.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {string} version The version of the application to delete.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async deleteMethodWithHttpOperationResponse(resourceGroupName: string, accountName: string, applicationId: string, version: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {\n        throw new Error('applicationId cannot be null or undefined and it must be of type string.');\n      }\n      if (version === null || version === undefined || typeof version.valueOf() !== 'string') {\n        throw new Error('version cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));\n    requestUrl = requestUrl.replace('{version}', encodeURIComponent(version));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'DELETE';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 204) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Gets information about the specified application package.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {string} version The version of the application.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async getWithHttpOperationResponse(resourceGroupName: string, accountName: string, applicationId: string, version: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {\n        throw new Error('applicationId cannot be null or undefined and it must be of type string.');\n      }\n      if (version === null || version === undefined || typeof version.valueOf() !== 'string') {\n        throw new Error('version cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}/versions/{version}';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));\n    requestUrl = requestUrl.replace('{version}', encodeURIComponent(version));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'GET';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.ApplicationPackage;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Activates the specified application package.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {string} version The version of the application to activate.\n   *\n   * @param {string} format The format of the application package binary file.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  activate(resourceGroupName: string, accountName: string, applicationId: string, version: string, format: string): Promise<void>;\n  activate(resourceGroupName: string, accountName: string, applicationId: string, version: string, format: string, options: msRest.RequestOptionsBase): Promise<void>;\n  activate(resourceGroupName: string, accountName: string, applicationId: string, version: string, format: string, callback: msRest.ServiceCallback<void>): void;\n  activate(resourceGroupName: string, accountName: string, applicationId: string, version: string, format: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  activate(resourceGroupName: string, accountName: string, applicationId: string, version: string, format: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.activateWithHttpOperationResponse(resourceGroupName, accountName, applicationId, version, format, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.activateWithHttpOperationResponse(resourceGroupName, accountName, applicationId, version, format, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as void;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Creates an application package record.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {string} version The version of the application.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.ApplicationPackage} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.ApplicationPackage} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  create(resourceGroupName: string, accountName: string, applicationId: string, version: string): Promise<Models.ApplicationPackage>;\n  create(resourceGroupName: string, accountName: string, applicationId: string, version: string, options: msRest.RequestOptionsBase): Promise<Models.ApplicationPackage>;\n  create(resourceGroupName: string, accountName: string, applicationId: string, version: string, callback: msRest.ServiceCallback<Models.ApplicationPackage>): void;\n  create(resourceGroupName: string, accountName: string, applicationId: string, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationPackage>): void;\n  create(resourceGroupName: string, accountName: string, applicationId: string, version: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationPackage>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.ApplicationPackage>;\n    if (!callback) {\n      return this.createWithHttpOperationResponse(resourceGroupName, accountName, applicationId, version, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.ApplicationPackage);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.createWithHttpOperationResponse(resourceGroupName, accountName, applicationId, version, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.ApplicationPackage;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Deletes an application package record and its associated binary file.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {string} version The version of the application to delete.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  deleteMethod(resourceGroupName: string, accountName: string, applicationId: string, version: string): Promise<void>;\n  deleteMethod(resourceGroupName: string, accountName: string, applicationId: string, version: string, options: msRest.RequestOptionsBase): Promise<void>;\n  deleteMethod(resourceGroupName: string, accountName: string, applicationId: string, version: string, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(resourceGroupName: string, accountName: string, applicationId: string, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(resourceGroupName: string, accountName: string, applicationId: string, version: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.deleteMethodWithHttpOperationResponse(resourceGroupName, accountName, applicationId, version, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(resourceGroupName, accountName, applicationId, version, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as void;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Gets information about the specified application package.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {string} version The version of the application.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.ApplicationPackage} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.ApplicationPackage} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  get(resourceGroupName: string, accountName: string, applicationId: string, version: string): Promise<Models.ApplicationPackage>;\n  get(resourceGroupName: string, accountName: string, applicationId: string, version: string, options: msRest.RequestOptionsBase): Promise<Models.ApplicationPackage>;\n  get(resourceGroupName: string, accountName: string, applicationId: string, version: string, callback: msRest.ServiceCallback<Models.ApplicationPackage>): void;\n  get(resourceGroupName: string, accountName: string, applicationId: string, version: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationPackage>): void;\n  get(resourceGroupName: string, accountName: string, applicationId: string, version: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ApplicationPackage>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.ApplicationPackage>;\n    if (!callback) {\n      return this.getWithHttpOperationResponse(resourceGroupName, accountName, applicationId, version, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.ApplicationPackage);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(resourceGroupName, accountName, applicationId, version, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.ApplicationPackage;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/applicationPackageOperations.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/mappers\";\nimport { BatchManagementClient } from \"../batchManagementClient\";\n\nconst WebResource = msRest.WebResource;\n\n/** Class representing a ApplicationOperations. */\nexport class ApplicationOperations {\n  private readonly client: BatchManagementClient;\n  /**\n   * Create a ApplicationOperations.\n   * @param {BatchManagementClient} client Reference to the service client.\n   */\n  constructor(client: BatchManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Adds an application to the specified Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {ApplicationCreateOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async createWithHttpOperationResponse(resourceGroupName: string, accountName: string, applicationId: string, options?: Models.ApplicationCreateOptionalParams): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    let parameters = (options && options.parameters !== undefined) ? options.parameters : undefined;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {\n        throw new Error('applicationId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'PUT';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    // Serialize Request\n    let requestContent = null;\n    let requestModel = null;\n    try {\n      if (parameters !== null && parameters !== undefined) {\n        let requestModelMapper = Mappers.ApplicationCreateParameters;\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\n        requestContent = JSON.stringify(requestModel);\n      }\n    } catch (error) {\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\n      return Promise.reject(serializationError);\n    }\n    httpRequest.body = requestContent;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 201) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 201) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.Application;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Deletes an application.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async deleteMethodWithHttpOperationResponse(resourceGroupName: string, accountName: string, applicationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {\n        throw new Error('applicationId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'DELETE';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 204) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Gets information about the specified application.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async getWithHttpOperationResponse(resourceGroupName: string, accountName: string, applicationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {\n        throw new Error('applicationId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'GET';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.Application;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Updates settings for the specified application.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {ApplicationUpdateParameters} parameters The parameters for the\n   * request.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async updateWithHttpOperationResponse(resourceGroupName: string, accountName: string, applicationId: string, parameters: Models.ApplicationUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {\n        throw new Error('applicationId cannot be null or undefined and it must be of type string.');\n      }\n      if (parameters === null || parameters === undefined) {\n        throw new Error('parameters cannot be null or undefined.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationId}';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'PATCH';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    // Serialize Request\n    let requestContent = null;\n    let requestModel = null;\n    try {\n      if (parameters !== null && parameters !== undefined) {\n        let requestModelMapper = Mappers.ApplicationUpdateParameters;\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\n        requestContent = JSON.stringify(requestModel);\n      }\n    } catch (error) {\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\n      return Promise.reject(serializationError);\n    }\n    httpRequest.body = requestContent;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 204) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Lists all of the applications in the specified account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {ApplicationListOptionalParams} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async listWithHttpOperationResponse(resourceGroupName: string, accountName: string, options?: Models.ApplicationListOptionalParams): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    let maxresults = (options && options.maxresults !== undefined) ? options.maxresults : undefined;\n    // Validate\n    try {\n      if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {\n        throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');\n      }\n      if (resourceGroupName !== null && resourceGroupName !== undefined) {\n        if (resourceGroupName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"resourceGroupName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {\n        throw new Error('accountName cannot be null or undefined and it must be of type string.');\n      }\n      if (accountName !== null && accountName !== undefined) {\n        if (accountName.length > 24)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MaxLength\": 24');\n        }\n        if (accountName.length < 3)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"MinLength\": 3');\n        }\n        if (accountName.match(/^[-\\w\\._]+$/) === null)\n        {\n          throw new Error('\"accountName\" should satisfy the constraint - \"Pattern\": /^[-\\w\\._]+$/');\n        }\n      }\n      if (maxresults !== null && maxresults !== undefined && typeof maxresults !== 'number') {\n        throw new Error('maxresults must be of type number.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications';\n    requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));\n    requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    if (maxresults !== null && maxresults !== undefined) {\n      queryParamsArray.push('maxresults=' + encodeURIComponent(maxresults.toString()));\n    }\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'GET';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.ListApplicationsResult;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Lists all of the applications in the specified account.\n   *\n   * @param {string} nextPageLink The NextLink from the previous successful call\n   * to List operation.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async listNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let requestUrl = '{nextLink}';\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'GET';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.ListApplicationsResult;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Adds an application to the specified Batch account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {ApplicationCreateOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.Application} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Application} for more information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  create(resourceGroupName: string, accountName: string, applicationId: string): Promise<Models.Application>;\n  create(resourceGroupName: string, accountName: string, applicationId: string, options: Models.ApplicationCreateOptionalParams): Promise<Models.Application>;\n  create(resourceGroupName: string, accountName: string, applicationId: string, callback: msRest.ServiceCallback<Models.Application>): void;\n  create(resourceGroupName: string, accountName: string, applicationId: string, options: Models.ApplicationCreateOptionalParams, callback: msRest.ServiceCallback<Models.Application>): void;\n  create(resourceGroupName: string, accountName: string, applicationId: string, options?: Models.ApplicationCreateOptionalParams, callback?: msRest.ServiceCallback<Models.Application>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Application>;\n    if (!callback) {\n      return this.createWithHttpOperationResponse(resourceGroupName, accountName, applicationId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.Application);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.createWithHttpOperationResponse(resourceGroupName, accountName, applicationId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.Application;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Deletes an application.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  deleteMethod(resourceGroupName: string, accountName: string, applicationId: string): Promise<void>;\n  deleteMethod(resourceGroupName: string, accountName: string, applicationId: string, options: msRest.RequestOptionsBase): Promise<void>;\n  deleteMethod(resourceGroupName: string, accountName: string, applicationId: string, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(resourceGroupName: string, accountName: string, applicationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteMethod(resourceGroupName: string, accountName: string, applicationId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.deleteMethodWithHttpOperationResponse(resourceGroupName, accountName, applicationId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(resourceGroupName, accountName, applicationId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as void;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Gets information about the specified application.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.Application} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.Application} for more information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  get(resourceGroupName: string, accountName: string, applicationId: string): Promise<Models.Application>;\n  get(resourceGroupName: string, accountName: string, applicationId: string, options: msRest.RequestOptionsBase): Promise<Models.Application>;\n  get(resourceGroupName: string, accountName: string, applicationId: string, callback: msRest.ServiceCallback<Models.Application>): void;\n  get(resourceGroupName: string, accountName: string, applicationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Application>): void;\n  get(resourceGroupName: string, accountName: string, applicationId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Application>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.Application>;\n    if (!callback) {\n      return this.getWithHttpOperationResponse(resourceGroupName, accountName, applicationId, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.Application);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getWithHttpOperationResponse(resourceGroupName, accountName, applicationId, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.Application;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Updates settings for the specified application.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {string} applicationId The ID of the application.\n   *\n   * @param {ApplicationUpdateParameters} parameters The parameters for the\n   * request.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {void} [result]   - The deserialized result object if an error did not occur.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  update(resourceGroupName: string, accountName: string, applicationId: string, parameters: Models.ApplicationUpdateParameters): Promise<void>;\n  update(resourceGroupName: string, accountName: string, applicationId: string, parameters: Models.ApplicationUpdateParameters, options: msRest.RequestOptionsBase): Promise<void>;\n  update(resourceGroupName: string, accountName: string, applicationId: string, parameters: Models.ApplicationUpdateParameters, callback: msRest.ServiceCallback<void>): void;\n  update(resourceGroupName: string, accountName: string, applicationId: string, parameters: Models.ApplicationUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  update(resourceGroupName: string, accountName: string, applicationId: string, parameters: Models.ApplicationUpdateParameters, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<void>;\n    if (!callback) {\n      return this.updateWithHttpOperationResponse(resourceGroupName, accountName, applicationId, parameters, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as void);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.updateWithHttpOperationResponse(resourceGroupName, accountName, applicationId, parameters, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as void;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Lists all of the applications in the specified account.\n   *\n   * @param {string} resourceGroupName The name of the resource group that\n   * contains the Batch account.\n   *\n   * @param {string} accountName The name of the Batch account.\n   *\n   * @param {ApplicationListOptionalParams} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.ListApplicationsResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.ListApplicationsResult} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  list(resourceGroupName: string, accountName: string): Promise<Models.ListApplicationsResult>;\n  list(resourceGroupName: string, accountName: string, options: Models.ApplicationListOptionalParams): Promise<Models.ListApplicationsResult>;\n  list(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.ListApplicationsResult>): void;\n  list(resourceGroupName: string, accountName: string, options: Models.ApplicationListOptionalParams, callback: msRest.ServiceCallback<Models.ListApplicationsResult>): void;\n  list(resourceGroupName: string, accountName: string, options?: Models.ApplicationListOptionalParams, callback?: msRest.ServiceCallback<Models.ListApplicationsResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.ListApplicationsResult>;\n    if (!callback) {\n      return this.listWithHttpOperationResponse(resourceGroupName, accountName, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.ListApplicationsResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.listWithHttpOperationResponse(resourceGroupName, accountName, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.ListApplicationsResult;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Lists all of the applications in the specified account.\n   *\n   * @param {string} nextPageLink The NextLink from the previous successful call\n   * to List operation.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.ListApplicationsResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.ListApplicationsResult} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  listNext(nextPageLink: string): Promise<Models.ListApplicationsResult>;\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.ListApplicationsResult>;\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ListApplicationsResult>): void;\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListApplicationsResult>): void;\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.ListApplicationsResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.ListApplicationsResult>;\n    if (!callback) {\n      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.ListApplicationsResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.ListApplicationsResult;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/applicationOperations.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/mappers\";\nimport { BatchManagementClient } from \"../batchManagementClient\";\n\nconst WebResource = msRest.WebResource;\n\n/** Class representing a Location. */\nexport class Location {\n  private readonly client: BatchManagementClient;\n  /**\n   * Create a Location.\n   * @param {BatchManagementClient} client Reference to the service client.\n   */\n  constructor(client: BatchManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets the Batch service quotas for the specified subscription at the given\n   * location.\n   *\n   * @param {string} locationName The region for which to retrieve Batch service\n   * quotas.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async getQuotasWithHttpOperationResponse(locationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (locationName === null || locationName === undefined || typeof locationName.valueOf() !== 'string') {\n        throw new Error('locationName cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Batch/locations/{locationName}/quotas';\n    requestUrl = requestUrl.replace('{locationName}', encodeURIComponent(locationName));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'GET';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.BatchLocationQuota;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Checks whether the Batch account name is available in the specified region.\n   *\n   * @param {string} locationName The desired region for the name check.\n   *\n   * @param {string} name The name to check for availability\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async checkNameAvailabilityWithHttpOperationResponse(locationName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (locationName === null || locationName === undefined || typeof locationName.valueOf() !== 'string') {\n        throw new Error('locationName cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {\n        throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');\n      }\n      if (name === null || name === undefined || typeof name.valueOf() !== 'string') {\n        throw new Error('name cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    let parameters: any = {};\n    try {\n      if (name !== null && name !== undefined)\n      {\n        parameters.name = name;\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.Batch/locations/{locationName}/checkNameAvailability';\n    requestUrl = requestUrl.replace('{locationName}', encodeURIComponent(locationName));\n    requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'POST';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    // Serialize Request\n    let requestContent = null;\n    let requestModel = null;\n    try {\n      if (parameters !== null && parameters !== undefined) {\n        let requestModelMapper = Mappers.CheckNameAvailabilityParameters;\n        requestModel = client.serializer.serialize(requestModelMapper, parameters, 'parameters');\n        requestContent = JSON.stringify(requestModel);\n      }\n    } catch (error) {\n      let serializationError = new Error(`Error \"${error.message}\" occurred in serializing the ` +\n          `payload - ${JSON.stringify(parameters, null, 2)}.`);\n      return Promise.reject(serializationError);\n    }\n    httpRequest.body = requestContent;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.CheckNameAvailabilityResult;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Gets the Batch service quotas for the specified subscription at the given\n   * location.\n   *\n   * @param {string} locationName The region for which to retrieve Batch service\n   * quotas.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.BatchLocationQuota} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.BatchLocationQuota} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  getQuotas(locationName: string): Promise<Models.BatchLocationQuota>;\n  getQuotas(locationName: string, options: msRest.RequestOptionsBase): Promise<Models.BatchLocationQuota>;\n  getQuotas(locationName: string, callback: msRest.ServiceCallback<Models.BatchLocationQuota>): void;\n  getQuotas(locationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BatchLocationQuota>): void;\n  getQuotas(locationName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BatchLocationQuota>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.BatchLocationQuota>;\n    if (!callback) {\n      return this.getQuotasWithHttpOperationResponse(locationName, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.BatchLocationQuota);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.getQuotasWithHttpOperationResponse(locationName, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.BatchLocationQuota;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Checks whether the Batch account name is available in the specified region.\n   *\n   * @param {string} locationName The desired region for the name check.\n   *\n   * @param {string} name The name to check for availability\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.CheckNameAvailabilityResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.CheckNameAvailabilityResult} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  checkNameAvailability(locationName: string, name: string): Promise<Models.CheckNameAvailabilityResult>;\n  checkNameAvailability(locationName: string, name: string, options: msRest.RequestOptionsBase): Promise<Models.CheckNameAvailabilityResult>;\n  checkNameAvailability(locationName: string, name: string, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;\n  checkNameAvailability(locationName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;\n  checkNameAvailability(locationName: string, name: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.CheckNameAvailabilityResult>;\n    if (!callback) {\n      return this.checkNameAvailabilityWithHttpOperationResponse(locationName, name, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.CheckNameAvailabilityResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.checkNameAvailabilityWithHttpOperationResponse(locationName, name, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.CheckNameAvailabilityResult;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/location.ts","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"ms-rest-js\";\nimport * as Models from \"../models\";\nimport * as Mappers from \"../models/mappers\";\nimport { BatchManagementClient } from \"../batchManagementClient\";\n\nconst WebResource = msRest.WebResource;\n\n/** Class representing a Operations. */\nexport class Operations {\n  private readonly client: BatchManagementClient;\n  /**\n   * Create a Operations.\n   * @param {BatchManagementClient} client Reference to the service client.\n   */\n  constructor(client: BatchManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists available operations for the Microsoft.Batch provider\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async listWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {\n        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let baseUrl = this.client.baseUri;\n    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'providers/Microsoft.Batch/operations';\n    let queryParamsArray: Array<any> = [];\n    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));\n    if (queryParamsArray.length > 0) {\n      requestUrl += '?' + queryParamsArray.join('&');\n    }\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'GET';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.OperationListResult;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Lists available operations for the Microsoft.Batch provider\n   *\n   * @param {string} nextPageLink The NextLink from the previous successful call\n   * to List operation.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @returns {Promise} A promise is returned\n   *\n   * @resolve {HttpOperationResponse} - The deserialized result object.\n   *\n   * @reject {Error|ServiceError} - The error object.\n   */\n  async listNextWithHttpOperationResponse(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse> {\n    let client = this.client;\n    // Validate\n    try {\n      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {\n        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');\n      }\n      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {\n        throw new Error('this.client.acceptLanguage must be of type string.');\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    // Construct URL\n    let requestUrl = '{nextLink}';\n    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);\n\n    // Create HTTP transport objects\n    let httpRequest = new WebResource();\n    httpRequest.method = 'GET';\n    httpRequest.url = requestUrl;\n    httpRequest.headers = {};\n    // Set Headers\n    httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';\n    if (this.client.generateClientRequestId) {\n        httpRequest.headers['x-ms-client-request-id'] = msRest.generateUuid();\n    }\n    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {\n      httpRequest.headers['accept-language'] = this.client.acceptLanguage;\n    }\n    if(options && options.customHeaders) {\n      for(let headerName in options.customHeaders) {\n        if (options.customHeaders.hasOwnProperty(headerName)) {\n          httpRequest.headers[headerName] = options.customHeaders[headerName];\n        }\n      }\n    }\n    httpRequest.body = null;\n    // Send Request\n    let operationRes: msRest.HttpOperationResponse;\n    try {\n      operationRes = await client.pipeline(httpRequest);\n      let response = operationRes.response;\n      let statusCode = response.status;\n      if (statusCode !== 200) {\n        let error = new msRest.RestError(operationRes.bodyAsText as string);\n        error.statusCode = response.status;\n        error.request = msRest.stripRequest(httpRequest);\n        error.response = msRest.stripResponse(response);\n        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedErrorResponse) {\n            if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;\n            if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;\n            if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;\n          }\n          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {\n            let resultMapper = Mappers.CloudError;\n            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');\n          }\n        } catch (defaultError) {\n          error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody ` +\n                           `- \"${operationRes.bodyAsText}\" for the default response.`;\n          return Promise.reject(error);\n        }\n        return Promise.reject(error);\n      }\n      // Deserialize Response\n      if (statusCode === 200) {\n        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };\n        try {\n          if (parsedResponse !== null && parsedResponse !== undefined) {\n            let resultMapper = Mappers.OperationListResult;\n            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');\n          }\n        } catch (error) {\n          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);\n          deserializationError.request = msRest.stripRequest(httpRequest);\n          deserializationError.response = msRest.stripResponse(response);\n          return Promise.reject(deserializationError);\n        }\n      }\n\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(operationRes);\n  }\n\n  /**\n   * Lists available operations for the Microsoft.Batch provider\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.OperationListResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.OperationListResult} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  list(): Promise<Models.OperationListResult>;\n  list(options: msRest.RequestOptionsBase): Promise<Models.OperationListResult>;\n  list(callback: msRest.ServiceCallback<Models.OperationListResult>): void;\n  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationListResult>): void;\n  list(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OperationListResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.OperationListResult>;\n    if (!callback) {\n      return this.listWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.OperationListResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.listWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.OperationListResult;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n  /**\n   * Lists available operations for the Microsoft.Batch provider\n   *\n   * @param {string} nextPageLink The NextLink from the previous successful call\n   * to List operation.\n   *\n   * @param {RequestOptionsBase} [options] Optional Parameters.\n   *\n   * @param {ServiceCallback} callback - The callback.\n   *\n   * @returns {ServiceCallback} callback(err, result, request, response)\n   *\n   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.\n   *\n   *                      {Models.OperationListResult} [result]   - The deserialized result object if an error did not occur.\n   *                      See {@link Models.OperationListResult} for more\n   *                      information.\n   *\n   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.\n   *\n   *                      {Response} [response] - The HTTP Response stream if an error did not occur.\n   */\n  listNext(nextPageLink: string): Promise<Models.OperationListResult>;\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase): Promise<Models.OperationListResult>;\n  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.OperationListResult>): void;\n  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationListResult>): void;\n  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.OperationListResult>): any {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = undefined;\n    }\n    let cb = callback as msRest.ServiceCallback<Models.OperationListResult>;\n    if (!callback) {\n      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {\n        return Promise.resolve(operationRes.bodyAsJson as Models.OperationListResult);\n      }).catch((err: Error) => {\n        return Promise.reject(err);\n      });\n    } else {\n      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {\n        if (err) {\n          return cb(err);\n        }\n        let result = data.bodyAsJson as Models.OperationListResult;\n        return cb(err, result, data.request, data.response);\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/operations/operations.ts"],"sourceRoot":""}