/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import {CloudErrorMapper, BaseResourceMapper } from "ms-rest-azure-ts";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const AutoStorageBaseProperties = {
  required: false,
  serializedName: 'AutoStorageBaseProperties',
  type: {
    name: 'Composite',
    className: 'AutoStorageBaseProperties',
    modelProperties: {
      storageAccountId: {
        required: true,
        serializedName: 'storageAccountId',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const KeyVaultReference = {
  required: false,
  serializedName: 'KeyVaultReference',
  type: {
    name: 'Composite',
    className: 'KeyVaultReference',
    modelProperties: {
      id: {
        required: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      url: {
        required: true,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const BatchAccountCreateParameters = {
  required: false,
  serializedName: 'BatchAccountCreateParameters',
  type: {
    name: 'Composite',
    className: 'BatchAccountCreateParameters',
    modelProperties: {
      location: {
        required: true,
        serializedName: 'location',
        type: {
          name: 'String'
        }
      },
      tags: {
        required: false,
        serializedName: 'tags',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      autoStorage: {
        required: false,
        serializedName: 'properties.autoStorage',
        type: {
          name: 'Composite',
          className: 'AutoStorageBaseProperties'
        }
      },
      poolAllocationMode: {
        required: false,
        serializedName: 'properties.poolAllocationMode',
        type: {
          name: 'Enum',
          allowedValues: [ 'BatchService', 'UserSubscription' ]
        }
      },
      keyVaultReference: {
        required: false,
        serializedName: 'properties.keyVaultReference',
        type: {
          name: 'Composite',
          className: 'KeyVaultReference'
        }
      }
    }
  }
};

export const AutoStorageProperties = {
  required: false,
  serializedName: 'AutoStorageProperties',
  type: {
    name: 'Composite',
    className: 'AutoStorageProperties',
    modelProperties: {
      storageAccountId: {
        required: true,
        serializedName: 'storageAccountId',
        type: {
          name: 'String'
        }
      },
      lastKeySync: {
        required: true,
        serializedName: 'lastKeySync',
        type: {
          name: 'DateTime'
        }
      }
    }
  }
};

export const Resource = {
  required: false,
  serializedName: 'Resource',
  type: {
    name: 'Composite',
    className: 'Resource',
    modelProperties: {
      id: {
        required: false,
        readOnly: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        readOnly: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        readOnly: true,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      location: {
        required: false,
        readOnly: true,
        serializedName: 'location',
        type: {
          name: 'String'
        }
      },
      tags: {
        required: false,
        readOnly: true,
        serializedName: 'tags',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const BatchAccount = {
  required: false,
  serializedName: 'BatchAccount',
  type: {
    name: 'Composite',
    className: 'BatchAccount',
    modelProperties: {
      id: {
        required: false,
        readOnly: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        readOnly: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        readOnly: true,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      location: {
        required: false,
        readOnly: true,
        serializedName: 'location',
        type: {
          name: 'String'
        }
      },
      tags: {
        required: false,
        readOnly: true,
        serializedName: 'tags',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      accountEndpoint: {
        required: false,
        readOnly: true,
        serializedName: 'properties.accountEndpoint',
        type: {
          name: 'String'
        }
      },
      provisioningState: {
        required: false,
        readOnly: true,
        serializedName: 'properties.provisioningState',
        type: {
          name: 'Enum',
          allowedValues: [ 'Invalid', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Cancelled' ]
        }
      },
      poolAllocationMode: {
        required: false,
        readOnly: true,
        serializedName: 'properties.poolAllocationMode',
        type: {
          name: 'Enum',
          allowedValues: [ 'BatchService', 'UserSubscription' ]
        }
      },
      keyVaultReference: {
        required: false,
        readOnly: true,
        serializedName: 'properties.keyVaultReference',
        type: {
          name: 'Composite',
          className: 'KeyVaultReference'
        }
      },
      autoStorage: {
        required: false,
        readOnly: true,
        serializedName: 'properties.autoStorage',
        type: {
          name: 'Composite',
          className: 'AutoStorageProperties'
        }
      },
      dedicatedCoreQuota: {
        required: false,
        readOnly: true,
        serializedName: 'properties.dedicatedCoreQuota',
        type: {
          name: 'Number'
        }
      },
      lowPriorityCoreQuota: {
        required: false,
        readOnly: true,
        serializedName: 'properties.lowPriorityCoreQuota',
        type: {
          name: 'Number'
        }
      },
      poolQuota: {
        required: false,
        readOnly: true,
        serializedName: 'properties.poolQuota',
        type: {
          name: 'Number'
        }
      },
      activeJobAndJobScheduleQuota: {
        required: false,
        readOnly: true,
        serializedName: 'properties.activeJobAndJobScheduleQuota',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const BatchAccountUpdateParameters = {
  required: false,
  serializedName: 'BatchAccountUpdateParameters',
  type: {
    name: 'Composite',
    className: 'BatchAccountUpdateParameters',
    modelProperties: {
      tags: {
        required: false,
        serializedName: 'tags',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      autoStorage: {
        required: false,
        serializedName: 'properties.autoStorage',
        type: {
          name: 'Composite',
          className: 'AutoStorageBaseProperties'
        }
      }
    }
  }
};

export const BatchAccountRegenerateKeyParameters = {
  required: false,
  serializedName: 'BatchAccountRegenerateKeyParameters',
  type: {
    name: 'Composite',
    className: 'BatchAccountRegenerateKeyParameters',
    modelProperties: {
      keyName: {
        required: true,
        serializedName: 'keyName',
        type: {
          name: 'Enum',
          allowedValues: [ 'Primary', 'Secondary' ]
        }
      }
    }
  }
};

export const BatchAccountKeys = {
  required: false,
  serializedName: 'BatchAccountKeys',
  type: {
    name: 'Composite',
    className: 'BatchAccountKeys',
    modelProperties: {
      accountName: {
        required: false,
        readOnly: true,
        serializedName: 'accountName',
        type: {
          name: 'String'
        }
      },
      primary: {
        required: false,
        readOnly: true,
        serializedName: 'primary',
        type: {
          name: 'String'
        }
      },
      secondary: {
        required: false,
        readOnly: true,
        serializedName: 'secondary',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ActivateApplicationPackageParameters = {
  required: false,
  serializedName: 'ActivateApplicationPackageParameters',
  type: {
    name: 'Composite',
    className: 'ActivateApplicationPackageParameters',
    modelProperties: {
      format: {
        required: true,
        serializedName: 'format',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ApplicationCreateParameters = {
  required: false,
  serializedName: 'ApplicationCreateParameters',
  type: {
    name: 'Composite',
    className: 'ApplicationCreateParameters',
    modelProperties: {
      allowUpdates: {
        required: false,
        serializedName: 'allowUpdates',
        type: {
          name: 'Boolean'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ApplicationPackage = {
  required: false,
  serializedName: 'ApplicationPackage',
  type: {
    name: 'Composite',
    className: 'ApplicationPackage',
    modelProperties: {
      id: {
        required: false,
        readOnly: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      version: {
        required: false,
        readOnly: true,
        serializedName: 'version',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        readOnly: true,
        serializedName: 'state',
        type: {
          name: 'Enum',
          allowedValues: [ 'pending', 'active', 'unmapped' ]
        }
      },
      format: {
        required: false,
        readOnly: true,
        serializedName: 'format',
        type: {
          name: 'String'
        }
      },
      storageUrl: {
        required: false,
        readOnly: true,
        serializedName: 'storageUrl',
        type: {
          name: 'String'
        }
      },
      storageUrlExpiry: {
        required: false,
        readOnly: true,
        serializedName: 'storageUrlExpiry',
        type: {
          name: 'DateTime'
        }
      },
      lastActivationTime: {
        required: false,
        readOnly: true,
        serializedName: 'lastActivationTime',
        type: {
          name: 'DateTime'
        }
      }
    }
  }
};

export const Application = {
  required: false,
  serializedName: 'Application',
  type: {
    name: 'Composite',
    className: 'Application',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      packages: {
        required: false,
        serializedName: 'packages',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ApplicationPackageElementType',
              type: {
                name: 'Composite',
                className: 'ApplicationPackage'
              }
          }
        }
      },
      allowUpdates: {
        required: false,
        serializedName: 'allowUpdates',
        type: {
          name: 'Boolean'
        }
      },
      defaultVersion: {
        required: false,
        serializedName: 'defaultVersion',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ApplicationUpdateParameters = {
  required: false,
  serializedName: 'ApplicationUpdateParameters',
  type: {
    name: 'Composite',
    className: 'ApplicationUpdateParameters',
    modelProperties: {
      allowUpdates: {
        required: false,
        serializedName: 'allowUpdates',
        type: {
          name: 'Boolean'
        }
      },
      defaultVersion: {
        required: false,
        serializedName: 'defaultVersion',
        type: {
          name: 'String'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const BatchLocationQuota = {
  required: false,
  serializedName: 'BatchLocationQuota',
  type: {
    name: 'Composite',
    className: 'BatchLocationQuota',
    modelProperties: {
      accountQuota: {
        required: false,
        readOnly: true,
        serializedName: 'accountQuota',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const OperationDisplay = {
  required: false,
  serializedName: 'Operation_display',
  type: {
    name: 'Composite',
    className: 'OperationDisplay',
    modelProperties: {
      provider: {
        required: false,
        serializedName: 'provider',
        type: {
          name: 'String'
        }
      },
      operation: {
        required: false,
        serializedName: 'operation',
        type: {
          name: 'String'
        }
      },
      resource: {
        required: false,
        serializedName: 'resource',
        type: {
          name: 'String'
        }
      },
      description: {
        required: false,
        serializedName: 'description',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const Operation = {
  required: false,
  serializedName: 'Operation',
  type: {
    name: 'Composite',
    className: 'Operation',
    modelProperties: {
      name: {
        required: false,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      display: {
        required: false,
        serializedName: 'display',
        type: {
          name: 'Composite',
          className: 'OperationDisplay'
        }
      },
      origin: {
        required: false,
        serializedName: 'origin',
        type: {
          name: 'String'
        }
      },
      properties: {
        required: false,
        serializedName: 'properties',
        type: {
          name: 'Object'
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters = {
  required: false,
  serializedName: 'CheckNameAvailabilityParameters',
  type: {
    name: 'Composite',
    className: 'CheckNameAvailabilityParameters',
    modelProperties: {
      name: {
        required: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: 'type',
        defaultValue: 'Microsoft.Batch/batchAccounts',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult = {
  required: false,
  serializedName: 'CheckNameAvailabilityResult',
  type: {
    name: 'Composite',
    className: 'CheckNameAvailabilityResult',
    modelProperties: {
      nameAvailable: {
        required: false,
        readOnly: true,
        serializedName: 'nameAvailable',
        type: {
          name: 'Boolean'
        }
      },
      reason: {
        required: false,
        readOnly: true,
        serializedName: 'reason',
        type: {
          name: 'Enum',
          allowedValues: [ 'Invalid', 'AlreadyExists' ]
        }
      },
      message: {
        required: false,
        readOnly: true,
        serializedName: 'message',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ApplicationCreateOptionalParams = {
  required: false,
  serializedName: 'CreateOptions',
  type: {
    name: 'Composite',
    className: 'ApplicationCreateOptionalParams',
    modelProperties: {
      parameters: {
        required: false,
        serializedName: 'parameters',
        type: {
          name: 'Composite',
          className: 'ApplicationCreateParameters'
        }
      }
    }
  }
};

export const ApplicationListOptionalParams = {
  required: false,
  serializedName: 'ListOptions',
  type: {
    name: 'Composite',
    className: 'ApplicationListOptionalParams',
    modelProperties: {
      maxresults: {
        required: false,
        serializedName: 'maxresults',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const BatchAccountListResult = {
  required: false,
  serializedName: 'BatchAccountListResult',
  type: {
    name: 'Composite',
    className: 'BatchAccountListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'BatchAccountElementType',
              type: {
                name: 'Composite',
                className: 'BatchAccount'
              }
          }
        }
      },
      nextLink: {
        required: false,
        serializedName: 'nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ListApplicationsResult = {
  required: false,
  serializedName: 'ListApplicationsResult',
  type: {
    name: 'Composite',
    className: 'ListApplicationsResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ApplicationElementType',
              type: {
                name: 'Composite',
                className: 'Application'
              }
          }
        }
      },
      nextLink: {
        required: false,
        serializedName: 'nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const OperationListResult = {
  required: false,
  serializedName: 'OperationListResult',
  type: {
    name: 'Composite',
    className: 'OperationListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'OperationElementType',
              type: {
                name: 'Composite',
                className: 'Operation'
              }
          }
        }
      },
      nextLink: {
        required: false,
        serializedName: 'nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};
